{"version":3,"sources":["components/SearchForm.js","components/EmployeeCard.js","utils/API.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","EmployeeCard","scope","alt","firstName","src","picture","lastName","email","phone","axios","get","SearchResultContainer","state","result","filter","filterBy","currentSort","sortField","filterEmployees","searchkey","console","log","filterResult","person","setState","event","preventDefault","target","API","then","res","data","results","map","e","i","first","last","large","dob","age","key","catch","err","this","item","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.baa39fdc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search for an Employee\"\r\n          id=\"search\"\r\n        />\r\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\"><img alt={props.firstName}  src={props.picture} /></th>  \r\n      <td >{props.firstName}</td>\r\n      <td >{props.lastName}</td>\r\n      <td >{props.email}</td>\r\n      <td >{props.phone}</td>\r\n   </tr>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\nexport default {\r\n  search: function() {\r\n       return axios.get(BASEURL);\r\n  }\r\n};","import React, {Component} from 'react';\r\nimport SearchForm from './SearchForm';\r\nimport EmployeeCard from './EmployeeCard';\r\nimport API from '../utils/API';\r\n\r\n\r\nclass SearchResultContainer extends Component {\r\n  state = {\r\n    result: [],\r\n    filter: \"\",\r\n    filterBy: \"lastName\",\r\n    currentSort: \"default\",\r\n    sortField: \"\"\r\n\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    API.search()\r\n      .then(res => {\r\n        console.log(res)\r\n        this.setState({\r\n          result: res.data.results.map((e, i) => ({\r\n            firstName: e.name.first,\r\n            lastName: e.name.last,\r\n            picture: e.picture.large,\r\n            email: e.email,\r\n            phone: e.phone,\r\n            dob: e.age,\r\n            key: i\r\n          }))\r\n\r\n        })\r\n     \r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  filterEmployees = (searchkey) => {\r\n    console.log(\"***in Filter*******\");\r\n    console.log(searchkey);\r\n    console.log(this.state.result);\r\n    var filterResult = this.state.result.filter(person => person.firstName === searchkey)\r\n\r\n    this.setState({\r\n      result:filterResult\r\n      \r\n    })\r\n  }\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    console.log(\"**********\");\r\n    console.log(value);\r\n    console.log(name);\r\n    this.filterEmployees(value);\r\n    this.setState({\r\n\r\n      [name]: value\r\n\r\n    });\r\n    this.filterEmployees(value);\r\n    this.filterEmployees(this.state.search);\r\n\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    event.preventDefault();\r\n    console.log(event);\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    console.log(\"**********\");\r\n    console.log(value);\r\n    console.log(name);\r\n   \r\n    this.setState({\r\n\r\n      [name]: value\r\n\r\n    });\r\n        \r\n  };\r\n\r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h2>Employee Directory</h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <SearchForm\r\n              value={this.state.search}\r\n               handleInputChange={this.handleInputChange}\r\n               handleFormSubmit={this.handleFormSubmit}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <table className=\"table\">\r\n            <tr>\r\n              <th scope=\"col\">Photo</th>\r\n              <th>First Name</th>\r\n              <th scope=\"col\">Last Name </th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Phone</th>\r\n            </tr>\r\n            {[...this.state.result].map((item) =>\r\n              <EmployeeCard\r\n                picture={item.picture}\r\n                firstName={item.firstName}\r\n                lastName={item.lastName}\r\n                email={item.email}\r\n                phone={item.phone}\r\n                key={item.key}\r\n              />\r\n            )}\r\n\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResultContainer;","import React from 'react';\nimport './App.css';\nimport SearchResultContainer from './components/SearchResultContainer';\n\nfunction App() {\n  return <SearchResultContainer/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}